{"version":3,"sources":["webpack:///./src/components/ProjectItem.tsx","webpack:///./src/components/Projects.tsx","webpack:///./src/pages/projects.tsx"],"names":["ItemWrapper","Image","Title","fonts","Info","Tags","Tag","OnlineDemoBtn","ProjectItem","image","title","owner","description","url","website","tags","style","position","href","src","alt","map","tag","i","key","Projects","github","useStaticQuery","viewer","topRepositories","nodes","filter","repo","allowedRepos","includes","databaseId","openGraphImageUrl","name","login","homepageUrl","repositoryTopics","node","topic","ProjectsPage","SEO","Header","SideInfo"],"mappings":"qOAIA,IAAMA,EAAc,iBAAH,wCAAG,CAAH,mOAcXC,EAAQ,mBAAH,kCAAG,CAAH,2JAaLC,EAAQ,kBAAH,kCAAG,CAAH,iCAEMC,IAFN,qBAMLC,EAAO,iBAAH,iCAAG,CAAH,iCAEOD,IAFP,oBAMJE,EAAO,kBAAH,iCAAG,CAAH,4EAMJC,EAAM,kBAAH,gCAAG,CAAH,sIAOQH,IAPR,iFAiBHI,EAAgB,iBAAH,0CAAG,CAAH,kPA2DJC,EAhCsB,SAAC,GAAD,IACnCC,EADmC,EACnCA,MACAC,EAFmC,EAEnCA,MACAC,EAHmC,EAGnCA,MACAC,EAJmC,EAInCA,YACAC,EALmC,EAKnCA,IACAC,EANmC,EAMnCA,QACAC,EAPmC,EAOnCA,KAPmC,OASnC,mBAAKC,MAAO,CAAEC,SAAU,aACtB,YAACjB,EAAD,CAAakB,KAAML,GACjB,YAACZ,EAAD,CAAOkB,IAAKV,EAAOW,IAAQV,EAAL,gBACtB,YAACR,EAAD,KACGS,GAAYA,EAAP,MACLD,GAEH,YAACN,EAAD,KAAOQ,GACP,YAACP,EAAD,KACGU,EAAKM,KAAI,SAACC,EAAKC,GAAN,OACR,YAACjB,EAAD,CAAKkB,IAAQd,EAAL,IAAca,GAAMD,QAIjCR,GACC,YAACP,EAAD,CAAeW,KAAMJ,GAArB,eAEE,uBAFF,cChDSW,EAhEY,WAAM,IACvBC,EAAWC,yBAAe,cAA1BD,OAwCR,OACE,uBACGA,EAAOE,OAAOC,gBAAgBC,MAC5BC,QAAO,SAACC,GAAD,OAAUC,eAAaC,SAASF,EAAKG,eAC5Cd,KAAI,SAACW,GAAD,OACH,YAAC,EAAD,CACER,IAAKQ,EAAKG,WACV1B,MAAOuB,EAAKI,kBACZ1B,MAAOsB,EAAKK,KACZzB,YAAaoB,EAAKpB,YAClBD,MAAOqB,EAAKrB,MAAM2B,MAClBzB,IAAKmB,EAAKnB,IACVC,QACuB,gCAArBkB,EAAKO,aACLP,EAAKO,YAEPxB,KAAMiB,EAAKQ,iBAAiBV,MAAMT,KAAI,SAACoB,GAAD,OAAUA,EAAKC,MAAML,e,wBC1CxDM,UAXgB,kBAC7B,YAAC,IAAD,KACE,YAACC,EAAA,EAAD,MACA,YAACC,EAAA,EAAD,MACA,YAAC,IAAD,KACE,YAACC,EAAA,EAAD,MACA,YAAC,EAAD","file":"component---src-pages-projects-tsx.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport * as fonts from '../styles/fonts';\n\nconst ItemWrapper = styled.a`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 14px;\n  margin: 0 auto 24px auto;\n  border-radius: 8px;\n  color: black;\n  background-color: #f5f5f5;\n  width: 90%;\n  text-decoration: none;\n`;\n\nconst Image = styled.img`\n  display: block;\n  margin: 6px;\n  height: 25vw;\n  max-height: 240px;\n  border-radius: 4px;\n\n  @media (max-width: 820px) {\n    height: auto;\n    max-height: 33vw;\n  }\n`;\n\nconst Title = styled.h3`\n  text-align: center;\n  font-weight: ${fonts.regular};\n  font-size: 1.3em;\n`;\n\nconst Info = styled.p`\n  text-align: center;\n  font-weight: ${fonts.light};\n  padding: 0 22px;\n`;\n\nconst Tags = styled.ul`\n  display: inline-flex;\n  align-items: center;\n  margin: 4px;\n`;\n\nconst Tag = styled.li`\n  display: inline-block;\n  padding: 0.3em 0.9em;\n  margin: 0.2em 0.5em;\n  background-color: #e8f1fa;\n  border-radius: 3px;\n  font-size: 0.8em;\n  font-weight: ${fonts.light};\n  text-align: center;\n\n  @media (max-width: 420px) {\n    &:nth-of-type(4) {\n      display: none;\n    }\n  }\n`;\n\nconst OnlineDemoBtn = styled.a`\n  position: absolute;\n  top: -10px;\n  right: calc(5% - 20px);\n  padding: 14px 20px;\n  background: #2f9366;\n  border-radius: 6px;\n  text-decoration: none;\n  text-align: center;\n  color: white;\n  font-size: 1.2em;\n\n  @media (max-width: 700px) {\n    padding: 2vw 3vw;\n  }\n`;\n\ninterface Props {\n  image: string;\n  title: string;\n  owner: string;\n  description: string;\n  url: string;\n  website?: string;\n  tags: string[];\n}\n\nconst ProjectItem: React.FC<Props> = ({\n  image,\n  title,\n  owner,\n  description,\n  url,\n  website,\n  tags,\n}) => (\n  <div style={{ position: 'relative' }}>\n    <ItemWrapper href={url}>\n      <Image src={image} alt={`${title} repo image`} />\n      <Title>\n        {owner && `${owner} / `}\n        {title}\n      </Title>\n      <Info>{description}</Info>\n      <Tags>\n        {tags.map((tag, i) => (\n          <Tag key={`${title}-${i}`}>{tag}</Tag>\n        ))}\n      </Tags>\n    </ItemWrapper>\n    {website && (\n      <OnlineDemoBtn href={website}>\n        Check it out\n        <br /> online!\n      </OnlineDemoBtn>\n    )}\n  </div>\n);\n\nexport default ProjectItem;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { allowedRepos } from 'data';\nimport ProjectItem from './ProjectItem';\n\nconst Projects: React.FC = () => {\n  const { github } = useStaticQuery(\n    graphql`\n      query {\n        github {\n          viewer {\n            topRepositories(\n              first: 50\n              orderBy: { field: PUSHED_AT, direction: DESC }\n            ) {\n              nodes {\n                databaseId\n                name\n                owner {\n                  login\n                }\n                url\n                openGraphImageUrl\n                description\n                pushedAt\n                homepageUrl\n                repositoryTopics(first: 4) {\n                  nodes {\n                    topic {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `,\n  );\n  // Used to see the repo's id in GitHub's database\n  // console.log(\n  //   github.viewer.topRepositories.nodes\n  //     .map((repo) => `${repo.owner.login}/${repo.name} - ${repo.databaseId}`)\n  //     .join('\\n'),\n  // );\n  return (\n    <div>\n      {github.viewer.topRepositories.nodes\n        .filter((repo) => allowedRepos.includes(repo.databaseId))\n        .map((repo) => (\n          <ProjectItem\n            key={repo.databaseId}\n            image={repo.openGraphImageUrl}\n            title={repo.name}\n            description={repo.description}\n            owner={repo.owner.login}\n            url={repo.url}\n            website={\n              repo.homepageUrl !== 'https://mariojim.github.io/' &&\n              repo.homepageUrl\n            }\n            tags={repo.repositoryTopics.nodes.map((node) => node.topic.name)}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default Projects;\n","import React from 'react';\nimport 'minireset.css';\n\nimport Header from '../components/Header';\nimport { Root, Wrapper } from '../components/layout';\nimport Projects from '../components/Projects';\nimport SEO from '../components/SEO';\nimport SideInfo from '../components/SideInfo';\n\nconst ProjectsPage: React.FC = () => (\n  <Root>\n    <SEO />\n    <Header />\n    <Wrapper>\n      <SideInfo />\n      <Projects />\n    </Wrapper>\n  </Root>\n);\n\nexport default ProjectsPage;\n"],"sourceRoot":""}